/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package zdf.learn.com.commonUtils.data.avro.schema.can300;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GPS extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4631689882084446337L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GPS\",\"namespace\":\"zdf.learn.com.commonUtils.data.avro.schema.can300\",\"fields\":[{\"name\":\"gpsDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"point\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Point\",\"fields\":[{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"default\":null}]}]},{\"name\":\"pdop\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"hdop\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"vdop\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"measureCount\",\"type\":[\"null\",\"long\"],\"default\":null}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GPS> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GPS> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GPS> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GPS> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GPS> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GPS to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GPS from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GPS instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GPS fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence gpsDate;
  private zdf.learn.com.commonUtils.data.avro.schema.can300.Point point;
  private java.lang.Long pdop;
  private java.lang.Long hdop;
  private java.lang.Long vdop;
  private java.lang.Long measureCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GPS() {}

  /**
   * All-args constructor.
   * @param gpsDate The new value for gpsDate
   * @param point The new value for point
   * @param pdop The new value for pdop
   * @param hdop The new value for hdop
   * @param vdop The new value for vdop
   * @param measureCount The new value for measureCount
   */
  public GPS(java.lang.CharSequence gpsDate, zdf.learn.com.commonUtils.data.avro.schema.can300.Point point, java.lang.Long pdop, java.lang.Long hdop, java.lang.Long vdop, java.lang.Long measureCount) {
    this.gpsDate = gpsDate;
    this.point = point;
    this.pdop = pdop;
    this.hdop = hdop;
    this.vdop = vdop;
    this.measureCount = measureCount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gpsDate;
    case 1: return point;
    case 2: return pdop;
    case 3: return hdop;
    case 4: return vdop;
    case 5: return measureCount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: gpsDate = (java.lang.CharSequence)value$; break;
    case 1: point = (zdf.learn.com.commonUtils.data.avro.schema.can300.Point)value$; break;
    case 2: pdop = (java.lang.Long)value$; break;
    case 3: hdop = (java.lang.Long)value$; break;
    case 4: vdop = (java.lang.Long)value$; break;
    case 5: measureCount = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'gpsDate' field.
   * @return The value of the 'gpsDate' field.
   */
  public java.lang.CharSequence getGpsDate() {
    return gpsDate;
  }


  /**
   * Sets the value of the 'gpsDate' field.
   * @param value the value to set.
   */
  public void setGpsDate(java.lang.CharSequence value) {
    this.gpsDate = value;
  }

  /**
   * Gets the value of the 'point' field.
   * @return The value of the 'point' field.
   */
  public zdf.learn.com.commonUtils.data.avro.schema.can300.Point getPoint() {
    return point;
  }


  /**
   * Sets the value of the 'point' field.
   * @param value the value to set.
   */
  public void setPoint(zdf.learn.com.commonUtils.data.avro.schema.can300.Point value) {
    this.point = value;
  }

  /**
   * Gets the value of the 'pdop' field.
   * @return The value of the 'pdop' field.
   */
  public java.lang.Long getPdop() {
    return pdop;
  }


  /**
   * Sets the value of the 'pdop' field.
   * @param value the value to set.
   */
  public void setPdop(java.lang.Long value) {
    this.pdop = value;
  }

  /**
   * Gets the value of the 'hdop' field.
   * @return The value of the 'hdop' field.
   */
  public java.lang.Long getHdop() {
    return hdop;
  }


  /**
   * Sets the value of the 'hdop' field.
   * @param value the value to set.
   */
  public void setHdop(java.lang.Long value) {
    this.hdop = value;
  }

  /**
   * Gets the value of the 'vdop' field.
   * @return The value of the 'vdop' field.
   */
  public java.lang.Long getVdop() {
    return vdop;
  }


  /**
   * Sets the value of the 'vdop' field.
   * @param value the value to set.
   */
  public void setVdop(java.lang.Long value) {
    this.vdop = value;
  }

  /**
   * Gets the value of the 'measureCount' field.
   * @return The value of the 'measureCount' field.
   */
  public java.lang.Long getMeasureCount() {
    return measureCount;
  }


  /**
   * Sets the value of the 'measureCount' field.
   * @param value the value to set.
   */
  public void setMeasureCount(java.lang.Long value) {
    this.measureCount = value;
  }

  /**
   * Creates a new GPS RecordBuilder.
   * @return A new GPS RecordBuilder
   */
  public static zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder newBuilder() {
    return new zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder();
  }

  /**
   * Creates a new GPS RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GPS RecordBuilder
   */
  public static zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder newBuilder(zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder other) {
    if (other == null) {
      return new zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder();
    } else {
      return new zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder(other);
    }
  }

  /**
   * Creates a new GPS RecordBuilder by copying an existing GPS instance.
   * @param other The existing instance to copy.
   * @return A new GPS RecordBuilder
   */
  public static zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder newBuilder(zdf.learn.com.commonUtils.data.avro.schema.can300.GPS other) {
    if (other == null) {
      return new zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder();
    } else {
      return new zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder(other);
    }
  }

  /**
   * RecordBuilder for GPS instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GPS>
    implements org.apache.avro.data.RecordBuilder<GPS> {

    private java.lang.CharSequence gpsDate;
    private zdf.learn.com.commonUtils.data.avro.schema.can300.Point point;
    private zdf.learn.com.commonUtils.data.avro.schema.can300.Point.Builder pointBuilder;
    private java.lang.Long pdop;
    private java.lang.Long hdop;
    private java.lang.Long vdop;
    private java.lang.Long measureCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.gpsDate)) {
        this.gpsDate = data().deepCopy(fields()[0].schema(), other.gpsDate);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.point)) {
        this.point = data().deepCopy(fields()[1].schema(), other.point);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasPointBuilder()) {
        this.pointBuilder = zdf.learn.com.commonUtils.data.avro.schema.can300.Point.newBuilder(other.getPointBuilder());
      }
      if (isValidValue(fields()[2], other.pdop)) {
        this.pdop = data().deepCopy(fields()[2].schema(), other.pdop);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.hdop)) {
        this.hdop = data().deepCopy(fields()[3].schema(), other.hdop);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.vdop)) {
        this.vdop = data().deepCopy(fields()[4].schema(), other.vdop);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.measureCount)) {
        this.measureCount = data().deepCopy(fields()[5].schema(), other.measureCount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing GPS instance
     * @param other The existing instance to copy.
     */
    private Builder(zdf.learn.com.commonUtils.data.avro.schema.can300.GPS other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.gpsDate)) {
        this.gpsDate = data().deepCopy(fields()[0].schema(), other.gpsDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.point)) {
        this.point = data().deepCopy(fields()[1].schema(), other.point);
        fieldSetFlags()[1] = true;
      }
      this.pointBuilder = null;
      if (isValidValue(fields()[2], other.pdop)) {
        this.pdop = data().deepCopy(fields()[2].schema(), other.pdop);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hdop)) {
        this.hdop = data().deepCopy(fields()[3].schema(), other.hdop);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.vdop)) {
        this.vdop = data().deepCopy(fields()[4].schema(), other.vdop);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.measureCount)) {
        this.measureCount = data().deepCopy(fields()[5].schema(), other.measureCount);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'gpsDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getGpsDate() {
      return gpsDate;
    }


    /**
      * Sets the value of the 'gpsDate' field.
      * @param value The value of 'gpsDate'.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder setGpsDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.gpsDate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'gpsDate' field has been set.
      * @return True if the 'gpsDate' field has been set, false otherwise.
      */
    public boolean hasGpsDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'gpsDate' field.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder clearGpsDate() {
      gpsDate = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'point' field.
      * @return The value.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.Point getPoint() {
      return point;
    }


    /**
      * Sets the value of the 'point' field.
      * @param value The value of 'point'.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder setPoint(zdf.learn.com.commonUtils.data.avro.schema.can300.Point value) {
      validate(fields()[1], value);
      this.pointBuilder = null;
      this.point = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'point' field has been set.
      * @return True if the 'point' field has been set, false otherwise.
      */
    public boolean hasPoint() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'point' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.Point.Builder getPointBuilder() {
      if (pointBuilder == null) {
        if (hasPoint()) {
          setPointBuilder(zdf.learn.com.commonUtils.data.avro.schema.can300.Point.newBuilder(point));
        } else {
          setPointBuilder(zdf.learn.com.commonUtils.data.avro.schema.can300.Point.newBuilder());
        }
      }
      return pointBuilder;
    }

    /**
     * Sets the Builder instance for the 'point' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder setPointBuilder(zdf.learn.com.commonUtils.data.avro.schema.can300.Point.Builder value) {
      clearPoint();
      pointBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'point' field has an active Builder instance
     * @return True if the 'point' field has an active Builder instance
     */
    public boolean hasPointBuilder() {
      return pointBuilder != null;
    }

    /**
      * Clears the value of the 'point' field.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder clearPoint() {
      point = null;
      pointBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pdop' field.
      * @return The value.
      */
    public java.lang.Long getPdop() {
      return pdop;
    }


    /**
      * Sets the value of the 'pdop' field.
      * @param value The value of 'pdop'.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder setPdop(java.lang.Long value) {
      validate(fields()[2], value);
      this.pdop = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pdop' field has been set.
      * @return True if the 'pdop' field has been set, false otherwise.
      */
    public boolean hasPdop() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pdop' field.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder clearPdop() {
      pdop = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'hdop' field.
      * @return The value.
      */
    public java.lang.Long getHdop() {
      return hdop;
    }


    /**
      * Sets the value of the 'hdop' field.
      * @param value The value of 'hdop'.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder setHdop(java.lang.Long value) {
      validate(fields()[3], value);
      this.hdop = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'hdop' field has been set.
      * @return True if the 'hdop' field has been set, false otherwise.
      */
    public boolean hasHdop() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'hdop' field.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder clearHdop() {
      hdop = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'vdop' field.
      * @return The value.
      */
    public java.lang.Long getVdop() {
      return vdop;
    }


    /**
      * Sets the value of the 'vdop' field.
      * @param value The value of 'vdop'.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder setVdop(java.lang.Long value) {
      validate(fields()[4], value);
      this.vdop = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'vdop' field has been set.
      * @return True if the 'vdop' field has been set, false otherwise.
      */
    public boolean hasVdop() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'vdop' field.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder clearVdop() {
      vdop = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'measureCount' field.
      * @return The value.
      */
    public java.lang.Long getMeasureCount() {
      return measureCount;
    }


    /**
      * Sets the value of the 'measureCount' field.
      * @param value The value of 'measureCount'.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder setMeasureCount(java.lang.Long value) {
      validate(fields()[5], value);
      this.measureCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'measureCount' field has been set.
      * @return True if the 'measureCount' field has been set, false otherwise.
      */
    public boolean hasMeasureCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'measureCount' field.
      * @return This builder.
      */
    public zdf.learn.com.commonUtils.data.avro.schema.can300.GPS.Builder clearMeasureCount() {
      measureCount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GPS build() {
      try {
        GPS record = new GPS();
        record.gpsDate = fieldSetFlags()[0] ? this.gpsDate : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (pointBuilder != null) {
          try {
            record.point = this.pointBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("point"));
            throw e;
          }
        } else {
          record.point = fieldSetFlags()[1] ? this.point : (zdf.learn.com.commonUtils.data.avro.schema.can300.Point) defaultValue(fields()[1]);
        }
        record.pdop = fieldSetFlags()[2] ? this.pdop : (java.lang.Long) defaultValue(fields()[2]);
        record.hdop = fieldSetFlags()[3] ? this.hdop : (java.lang.Long) defaultValue(fields()[3]);
        record.vdop = fieldSetFlags()[4] ? this.vdop : (java.lang.Long) defaultValue(fields()[4]);
        record.measureCount = fieldSetFlags()[5] ? this.measureCount : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GPS>
    WRITER$ = (org.apache.avro.io.DatumWriter<GPS>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GPS>
    READER$ = (org.apache.avro.io.DatumReader<GPS>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.gpsDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.gpsDate);
    }

    if (this.point == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.point.customEncode(out);
    }

    if (this.pdop == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.pdop);
    }

    if (this.hdop == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.hdop);
    }

    if (this.vdop == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.vdop);
    }

    if (this.measureCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.measureCount);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.gpsDate = null;
      } else {
        this.gpsDate = in.readString(this.gpsDate instanceof Utf8 ? (Utf8)this.gpsDate : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.point = null;
      } else {
        if (this.point == null) {
          this.point = new zdf.learn.com.commonUtils.data.avro.schema.can300.Point();
        }
        this.point.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pdop = null;
      } else {
        this.pdop = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hdop = null;
      } else {
        this.hdop = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.vdop = null;
      } else {
        this.vdop = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.measureCount = null;
      } else {
        this.measureCount = in.readLong();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gpsDate = null;
          } else {
            this.gpsDate = in.readString(this.gpsDate instanceof Utf8 ? (Utf8)this.gpsDate : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.point = null;
          } else {
            if (this.point == null) {
              this.point = new zdf.learn.com.commonUtils.data.avro.schema.can300.Point();
            }
            this.point.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pdop = null;
          } else {
            this.pdop = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hdop = null;
          } else {
            this.hdop = in.readLong();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.vdop = null;
          } else {
            this.vdop = in.readLong();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.measureCount = null;
          } else {
            this.measureCount = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










