/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Dcm19Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8980377822262862667L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Dcm19Message\",\"namespace\":\"src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300\",\"fields\":[{\"name\":\"commonHeader\",\"type\":{\"type\":\"record\",\"name\":\"CommonHeader\",\"fields\":[{\"name\":\"dataVersion\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"commandType\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"destinationInformation\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"formatInformation\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"dcuOrDcuMeuClassification\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"dcu\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"meu\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"communicationModeFlag\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"electricPfInformation\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"geodeticSystemInformation\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"mapBasedVersion\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"size\",\"type\":[\"null\",\"long\"],\"default\":null}]}},{\"name\":\"updCondition\",\"type\":{\"type\":\"record\",\"name\":\"UpdCondition\",\"fields\":[{\"name\":\"updConditionId\",\"type\":[\"null\",\"long\"],\"default\":null}],\"default\":null}},{\"name\":\"vehicleInformationHeader\",\"type\":{\"type\":\"record\",\"name\":\"VehicleInformationHeader\",\"fields\":[{\"name\":\"dataCapacityNumber\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"timeZoneOffset\",\"type\":[\"null\",\"int\"],\"default\":null}],\"default\":null}},{\"name\":\"dataCapacityList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DataCapacity\",\"fields\":[{\"name\":\"timeAndCoordinate\",\"type\":{\"type\":\"record\",\"name\":\"TimeAndCoordinate\",\"fields\":[{\"name\":\"gps\",\"type\":{\"type\":\"record\",\"name\":\"GPS\",\"fields\":[{\"name\":\"gpsDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"point\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Point\",\"fields\":[{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"default\":null}]}]},{\"name\":\"pdop\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"hdop\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"vdop\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"measureCount\",\"type\":[\"null\",\"long\"],\"default\":null}],\"default\":null}},{\"name\":\"mm\",\"type\":{\"type\":\"record\",\"name\":\"MM\",\"fields\":[{\"name\":\"point\",\"type\":[\"null\",\"Point\"],\"default\":null},{\"name\":\"rticLinkId\",\"type\":[\"null\",\"long\"],\"default\":null}],\"default\":null}}],\"default\":null}},{\"name\":\"canFrameNumber\",\"type\":{\"type\":\"record\",\"name\":\"CanFrameNumber\",\"fields\":[{\"name\":\"dataCapacityType\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"dataCapacityNumber\",\"type\":[\"null\",\"long\"],\"default\":null}],\"default\":null}},{\"name\":\"canInformationList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CanInformationList\",\"fields\":[{\"name\":\"canId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"dataLengthAfterCompression\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"collectType\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"canType\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"outsideUseDataMap\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"map\",\"values\":\"string\"}}],\"default\":null}],\"default\":null},\"java-class\":\"java.util.List\"}},{\"name\":\"type3OutsideUseData\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Type3OutsideUseData\",\"fields\":[{\"name\":\"dateTime\",\"type\":\"string\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"},{\"name\":\"unit\",\"type\":\"string\"}],\"default\":null},\"java-class\":\"java.util.List\"}}],\"default\":null},\"java-class\":\"java.util.List\"}}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Dcm19Message> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Dcm19Message> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Dcm19Message> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Dcm19Message> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Dcm19Message> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Dcm19Message to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Dcm19Message from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Dcm19Message instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Dcm19Message fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader commonHeader;
  private src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition updCondition;
  private src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader vehicleInformationHeader;
  private java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> dataCapacityList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Dcm19Message() {}

  /**
   * All-args constructor.
   * @param commonHeader The new value for commonHeader
   * @param updCondition The new value for updCondition
   * @param vehicleInformationHeader The new value for vehicleInformationHeader
   * @param dataCapacityList The new value for dataCapacityList
   */
  public Dcm19Message(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader commonHeader, src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition updCondition, src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader vehicleInformationHeader, java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> dataCapacityList) {
    this.commonHeader = commonHeader;
    this.updCondition = updCondition;
    this.vehicleInformationHeader = vehicleInformationHeader;
    this.dataCapacityList = dataCapacityList;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return commonHeader;
    case 1: return updCondition;
    case 2: return vehicleInformationHeader;
    case 3: return dataCapacityList;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: commonHeader = (src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader)value$; break;
    case 1: updCondition = (src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition)value$; break;
    case 2: vehicleInformationHeader = (src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader)value$; break;
    case 3: dataCapacityList = (java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'commonHeader' field.
   * @return The value of the 'commonHeader' field.
   */
  public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader getCommonHeader() {
    return commonHeader;
  }


  /**
   * Sets the value of the 'commonHeader' field.
   * @param value the value to set.
   */
  public void setCommonHeader(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader value) {
    this.commonHeader = value;
  }

  /**
   * Gets the value of the 'updCondition' field.
   * @return The value of the 'updCondition' field.
   */
  public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition getUpdCondition() {
    return updCondition;
  }


  /**
   * Sets the value of the 'updCondition' field.
   * @param value the value to set.
   */
  public void setUpdCondition(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition value) {
    this.updCondition = value;
  }

  /**
   * Gets the value of the 'vehicleInformationHeader' field.
   * @return The value of the 'vehicleInformationHeader' field.
   */
  public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader getVehicleInformationHeader() {
    return vehicleInformationHeader;
  }


  /**
   * Sets the value of the 'vehicleInformationHeader' field.
   * @param value the value to set.
   */
  public void setVehicleInformationHeader(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader value) {
    this.vehicleInformationHeader = value;
  }

  /**
   * Gets the value of the 'dataCapacityList' field.
   * @return The value of the 'dataCapacityList' field.
   */
  public java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> getDataCapacityList() {
    return dataCapacityList;
  }


  /**
   * Sets the value of the 'dataCapacityList' field.
   * @param value the value to set.
   */
  public void setDataCapacityList(java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> value) {
    this.dataCapacityList = value;
  }

  /**
   * Creates a new Dcm19Message RecordBuilder.
   * @return A new Dcm19Message RecordBuilder
   */
  public static src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder newBuilder() {
    return new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder();
  }

  /**
   * Creates a new Dcm19Message RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Dcm19Message RecordBuilder
   */
  public static src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder newBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder other) {
    if (other == null) {
      return new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder();
    } else {
      return new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder(other);
    }
  }

  /**
   * Creates a new Dcm19Message RecordBuilder by copying an existing Dcm19Message instance.
   * @param other The existing instance to copy.
   * @return A new Dcm19Message RecordBuilder
   */
  public static src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder newBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message other) {
    if (other == null) {
      return new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder();
    } else {
      return new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder(other);
    }
  }

  /**
   * RecordBuilder for Dcm19Message instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Dcm19Message>
    implements org.apache.avro.data.RecordBuilder<Dcm19Message> {

    private src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader commonHeader;
    private src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader.Builder commonHeaderBuilder;
    private src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition updCondition;
    private src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition.Builder updConditionBuilder;
    private src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader vehicleInformationHeader;
    private src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader.Builder vehicleInformationHeaderBuilder;
    private java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> dataCapacityList;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.commonHeader)) {
        this.commonHeader = data().deepCopy(fields()[0].schema(), other.commonHeader);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasCommonHeaderBuilder()) {
        this.commonHeaderBuilder = src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader.newBuilder(other.getCommonHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.updCondition)) {
        this.updCondition = data().deepCopy(fields()[1].schema(), other.updCondition);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasUpdConditionBuilder()) {
        this.updConditionBuilder = src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition.newBuilder(other.getUpdConditionBuilder());
      }
      if (isValidValue(fields()[2], other.vehicleInformationHeader)) {
        this.vehicleInformationHeader = data().deepCopy(fields()[2].schema(), other.vehicleInformationHeader);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasVehicleInformationHeaderBuilder()) {
        this.vehicleInformationHeaderBuilder = src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader.newBuilder(other.getVehicleInformationHeaderBuilder());
      }
      if (isValidValue(fields()[3], other.dataCapacityList)) {
        this.dataCapacityList = data().deepCopy(fields()[3].schema(), other.dataCapacityList);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Dcm19Message instance
     * @param other The existing instance to copy.
     */
    private Builder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.commonHeader)) {
        this.commonHeader = data().deepCopy(fields()[0].schema(), other.commonHeader);
        fieldSetFlags()[0] = true;
      }
      this.commonHeaderBuilder = null;
      if (isValidValue(fields()[1], other.updCondition)) {
        this.updCondition = data().deepCopy(fields()[1].schema(), other.updCondition);
        fieldSetFlags()[1] = true;
      }
      this.updConditionBuilder = null;
      if (isValidValue(fields()[2], other.vehicleInformationHeader)) {
        this.vehicleInformationHeader = data().deepCopy(fields()[2].schema(), other.vehicleInformationHeader);
        fieldSetFlags()[2] = true;
      }
      this.vehicleInformationHeaderBuilder = null;
      if (isValidValue(fields()[3], other.dataCapacityList)) {
        this.dataCapacityList = data().deepCopy(fields()[3].schema(), other.dataCapacityList);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'commonHeader' field.
      * @return The value.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader getCommonHeader() {
      return commonHeader;
    }


    /**
      * Sets the value of the 'commonHeader' field.
      * @param value The value of 'commonHeader'.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder setCommonHeader(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader value) {
      validate(fields()[0], value);
      this.commonHeaderBuilder = null;
      this.commonHeader = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'commonHeader' field has been set.
      * @return True if the 'commonHeader' field has been set, false otherwise.
      */
    public boolean hasCommonHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'commonHeader' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader.Builder getCommonHeaderBuilder() {
      if (commonHeaderBuilder == null) {
        if (hasCommonHeader()) {
          setCommonHeaderBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader.newBuilder(commonHeader));
        } else {
          setCommonHeaderBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader.newBuilder());
        }
      }
      return commonHeaderBuilder;
    }

    /**
     * Sets the Builder instance for the 'commonHeader' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder setCommonHeaderBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader.Builder value) {
      clearCommonHeader();
      commonHeaderBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'commonHeader' field has an active Builder instance
     * @return True if the 'commonHeader' field has an active Builder instance
     */
    public boolean hasCommonHeaderBuilder() {
      return commonHeaderBuilder != null;
    }

    /**
      * Clears the value of the 'commonHeader' field.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder clearCommonHeader() {
      commonHeader = null;
      commonHeaderBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'updCondition' field.
      * @return The value.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition getUpdCondition() {
      return updCondition;
    }


    /**
      * Sets the value of the 'updCondition' field.
      * @param value The value of 'updCondition'.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder setUpdCondition(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition value) {
      validate(fields()[1], value);
      this.updConditionBuilder = null;
      this.updCondition = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'updCondition' field has been set.
      * @return True if the 'updCondition' field has been set, false otherwise.
      */
    public boolean hasUpdCondition() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'updCondition' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition.Builder getUpdConditionBuilder() {
      if (updConditionBuilder == null) {
        if (hasUpdCondition()) {
          setUpdConditionBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition.newBuilder(updCondition));
        } else {
          setUpdConditionBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition.newBuilder());
        }
      }
      return updConditionBuilder;
    }

    /**
     * Sets the Builder instance for the 'updCondition' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder setUpdConditionBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition.Builder value) {
      clearUpdCondition();
      updConditionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'updCondition' field has an active Builder instance
     * @return True if the 'updCondition' field has an active Builder instance
     */
    public boolean hasUpdConditionBuilder() {
      return updConditionBuilder != null;
    }

    /**
      * Clears the value of the 'updCondition' field.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder clearUpdCondition() {
      updCondition = null;
      updConditionBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleInformationHeader' field.
      * @return The value.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader getVehicleInformationHeader() {
      return vehicleInformationHeader;
    }


    /**
      * Sets the value of the 'vehicleInformationHeader' field.
      * @param value The value of 'vehicleInformationHeader'.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder setVehicleInformationHeader(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader value) {
      validate(fields()[2], value);
      this.vehicleInformationHeaderBuilder = null;
      this.vehicleInformationHeader = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleInformationHeader' field has been set.
      * @return True if the 'vehicleInformationHeader' field has been set, false otherwise.
      */
    public boolean hasVehicleInformationHeader() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'vehicleInformationHeader' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader.Builder getVehicleInformationHeaderBuilder() {
      if (vehicleInformationHeaderBuilder == null) {
        if (hasVehicleInformationHeader()) {
          setVehicleInformationHeaderBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader.newBuilder(vehicleInformationHeader));
        } else {
          setVehicleInformationHeaderBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader.newBuilder());
        }
      }
      return vehicleInformationHeaderBuilder;
    }

    /**
     * Sets the Builder instance for the 'vehicleInformationHeader' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder setVehicleInformationHeaderBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader.Builder value) {
      clearVehicleInformationHeader();
      vehicleInformationHeaderBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'vehicleInformationHeader' field has an active Builder instance
     * @return True if the 'vehicleInformationHeader' field has an active Builder instance
     */
    public boolean hasVehicleInformationHeaderBuilder() {
      return vehicleInformationHeaderBuilder != null;
    }

    /**
      * Clears the value of the 'vehicleInformationHeader' field.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder clearVehicleInformationHeader() {
      vehicleInformationHeader = null;
      vehicleInformationHeaderBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataCapacityList' field.
      * @return The value.
      */
    public java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> getDataCapacityList() {
      return dataCapacityList;
    }


    /**
      * Sets the value of the 'dataCapacityList' field.
      * @param value The value of 'dataCapacityList'.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder setDataCapacityList(java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> value) {
      validate(fields()[3], value);
      this.dataCapacityList = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dataCapacityList' field has been set.
      * @return True if the 'dataCapacityList' field has been set, false otherwise.
      */
    public boolean hasDataCapacityList() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dataCapacityList' field.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.Dcm19Message.Builder clearDataCapacityList() {
      dataCapacityList = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Dcm19Message build() {
      try {
        Dcm19Message record = new Dcm19Message();
        if (commonHeaderBuilder != null) {
          try {
            record.commonHeader = this.commonHeaderBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("commonHeader"));
            throw e;
          }
        } else {
          record.commonHeader = fieldSetFlags()[0] ? this.commonHeader : (src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader) defaultValue(fields()[0]);
        }
        if (updConditionBuilder != null) {
          try {
            record.updCondition = this.updConditionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("updCondition"));
            throw e;
          }
        } else {
          record.updCondition = fieldSetFlags()[1] ? this.updCondition : (src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition) defaultValue(fields()[1]);
        }
        if (vehicleInformationHeaderBuilder != null) {
          try {
            record.vehicleInformationHeader = this.vehicleInformationHeaderBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("vehicleInformationHeader"));
            throw e;
          }
        } else {
          record.vehicleInformationHeader = fieldSetFlags()[2] ? this.vehicleInformationHeader : (src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader) defaultValue(fields()[2]);
        }
        record.dataCapacityList = fieldSetFlags()[3] ? this.dataCapacityList : (java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Dcm19Message>
    WRITER$ = (org.apache.avro.io.DatumWriter<Dcm19Message>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Dcm19Message>
    READER$ = (org.apache.avro.io.DatumReader<Dcm19Message>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.commonHeader.customEncode(out);

    this.updCondition.customEncode(out);

    this.vehicleInformationHeader.customEncode(out);

    long size0 = this.dataCapacityList.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity e0: this.dataCapacityList) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.commonHeader == null) {
        this.commonHeader = new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader();
      }
      this.commonHeader.customDecode(in);

      if (this.updCondition == null) {
        this.updCondition = new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition();
      }
      this.updCondition.customDecode(in);

      if (this.vehicleInformationHeader == null) {
        this.vehicleInformationHeader = new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader();
      }
      this.vehicleInformationHeader.customDecode(in);

      long size0 = in.readArrayStart();
      java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> a0 = this.dataCapacityList;
      if (a0 == null) {
        a0 = new SpecificData.Array<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity>((int)size0, SCHEMA$.getField("dataCapacityList").schema());
        this.dataCapacityList = a0;
      } else a0.clear();
      SpecificData.Array<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.commonHeader == null) {
            this.commonHeader = new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CommonHeader();
          }
          this.commonHeader.customDecode(in);
          break;

        case 1:
          if (this.updCondition == null) {
            this.updCondition = new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.UpdCondition();
          }
          this.updCondition.customDecode(in);
          break;

        case 2:
          if (this.vehicleInformationHeader == null) {
            this.vehicleInformationHeader = new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.VehicleInformationHeader();
          }
          this.vehicleInformationHeader.customDecode(in);
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> a0 = this.dataCapacityList;
          if (a0 == null) {
            a0 = new SpecificData.Array<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity>((int)size0, SCHEMA$.getField("dataCapacityList").schema());
            this.dataCapacityList = a0;
          } else a0.clear();
          SpecificData.Array<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.DataCapacity();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










