/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CanFrameNumber extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8918037290221580325L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CanFrameNumber\",\"namespace\":\"src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300\",\"fields\":[{\"name\":\"dataCapacityType\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"dataCapacityNumber\",\"type\":[\"null\",\"long\"],\"default\":null}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CanFrameNumber> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CanFrameNumber> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CanFrameNumber> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CanFrameNumber> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CanFrameNumber> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CanFrameNumber to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CanFrameNumber from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CanFrameNumber instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CanFrameNumber fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Long dataCapacityType;
  private java.lang.Long dataCapacityNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CanFrameNumber() {}

  /**
   * All-args constructor.
   * @param dataCapacityType The new value for dataCapacityType
   * @param dataCapacityNumber The new value for dataCapacityNumber
   */
  public CanFrameNumber(java.lang.Long dataCapacityType, java.lang.Long dataCapacityNumber) {
    this.dataCapacityType = dataCapacityType;
    this.dataCapacityNumber = dataCapacityNumber;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dataCapacityType;
    case 1: return dataCapacityNumber;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dataCapacityType = (java.lang.Long)value$; break;
    case 1: dataCapacityNumber = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'dataCapacityType' field.
   * @return The value of the 'dataCapacityType' field.
   */
  public java.lang.Long getDataCapacityType() {
    return dataCapacityType;
  }


  /**
   * Sets the value of the 'dataCapacityType' field.
   * @param value the value to set.
   */
  public void setDataCapacityType(java.lang.Long value) {
    this.dataCapacityType = value;
  }

  /**
   * Gets the value of the 'dataCapacityNumber' field.
   * @return The value of the 'dataCapacityNumber' field.
   */
  public java.lang.Long getDataCapacityNumber() {
    return dataCapacityNumber;
  }


  /**
   * Sets the value of the 'dataCapacityNumber' field.
   * @param value the value to set.
   */
  public void setDataCapacityNumber(java.lang.Long value) {
    this.dataCapacityNumber = value;
  }

  /**
   * Creates a new CanFrameNumber RecordBuilder.
   * @return A new CanFrameNumber RecordBuilder
   */
  public static src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder newBuilder() {
    return new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder();
  }

  /**
   * Creates a new CanFrameNumber RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CanFrameNumber RecordBuilder
   */
  public static src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder newBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder other) {
    if (other == null) {
      return new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder();
    } else {
      return new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder(other);
    }
  }

  /**
   * Creates a new CanFrameNumber RecordBuilder by copying an existing CanFrameNumber instance.
   * @param other The existing instance to copy.
   * @return A new CanFrameNumber RecordBuilder
   */
  public static src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder newBuilder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber other) {
    if (other == null) {
      return new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder();
    } else {
      return new src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder(other);
    }
  }

  /**
   * RecordBuilder for CanFrameNumber instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CanFrameNumber>
    implements org.apache.avro.data.RecordBuilder<CanFrameNumber> {

    private java.lang.Long dataCapacityType;
    private java.lang.Long dataCapacityNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dataCapacityType)) {
        this.dataCapacityType = data().deepCopy(fields()[0].schema(), other.dataCapacityType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dataCapacityNumber)) {
        this.dataCapacityNumber = data().deepCopy(fields()[1].schema(), other.dataCapacityNumber);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing CanFrameNumber instance
     * @param other The existing instance to copy.
     */
    private Builder(src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.dataCapacityType)) {
        this.dataCapacityType = data().deepCopy(fields()[0].schema(), other.dataCapacityType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dataCapacityNumber)) {
        this.dataCapacityNumber = data().deepCopy(fields()[1].schema(), other.dataCapacityNumber);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'dataCapacityType' field.
      * @return The value.
      */
    public java.lang.Long getDataCapacityType() {
      return dataCapacityType;
    }


    /**
      * Sets the value of the 'dataCapacityType' field.
      * @param value The value of 'dataCapacityType'.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder setDataCapacityType(java.lang.Long value) {
      validate(fields()[0], value);
      this.dataCapacityType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'dataCapacityType' field has been set.
      * @return True if the 'dataCapacityType' field has been set, false otherwise.
      */
    public boolean hasDataCapacityType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dataCapacityType' field.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder clearDataCapacityType() {
      dataCapacityType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataCapacityNumber' field.
      * @return The value.
      */
    public java.lang.Long getDataCapacityNumber() {
      return dataCapacityNumber;
    }


    /**
      * Sets the value of the 'dataCapacityNumber' field.
      * @param value The value of 'dataCapacityNumber'.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder setDataCapacityNumber(java.lang.Long value) {
      validate(fields()[1], value);
      this.dataCapacityNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dataCapacityNumber' field has been set.
      * @return True if the 'dataCapacityNumber' field has been set, false otherwise.
      */
    public boolean hasDataCapacityNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dataCapacityNumber' field.
      * @return This builder.
      */
    public src.main.java.zdf.learn.com.commonUtils.data.avro.schema.can300.CanFrameNumber.Builder clearDataCapacityNumber() {
      dataCapacityNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CanFrameNumber build() {
      try {
        CanFrameNumber record = new CanFrameNumber();
        record.dataCapacityType = fieldSetFlags()[0] ? this.dataCapacityType : (java.lang.Long) defaultValue(fields()[0]);
        record.dataCapacityNumber = fieldSetFlags()[1] ? this.dataCapacityNumber : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CanFrameNumber>
    WRITER$ = (org.apache.avro.io.DatumWriter<CanFrameNumber>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CanFrameNumber>
    READER$ = (org.apache.avro.io.DatumReader<CanFrameNumber>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.dataCapacityType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.dataCapacityType);
    }

    if (this.dataCapacityNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.dataCapacityNumber);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.dataCapacityType = null;
      } else {
        this.dataCapacityType = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dataCapacityNumber = null;
      } else {
        this.dataCapacityNumber = in.readLong();
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dataCapacityType = null;
          } else {
            this.dataCapacityType = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dataCapacityNumber = null;
          } else {
            this.dataCapacityNumber = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










